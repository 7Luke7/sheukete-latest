- When we modify skills we don't update the reviews or completed jobs count

- შეგივიძლია დამკვეთის ჩატვირთვისას განცხადებები სქროლვის შემდეგ ჩავტვირთოთ და ზევით სხვა რაღაცაები გავუშვათ
- ჩატვირთვა ბევრად სწრაფი იქნება

- ფოტოებში გამოიყენე srcSet დაგეხმარება პერფორმანსის გაუმჯობესებაში
- შეცვალე Server return-ი json() ფუნქციით და response.status-ით გაუშვი ერორები



---- Memcached (Caching) ----

 -- შეგივიძლია გვქონდეს 1 ან მეტი სერვერი თითოეულ სერვერს შევძლებთ განვუსაზღვროთ
	- მაქსიმალური client კავშირი
	- გამოვუყოთ მეხსიერება
	- და სხვა.

 -- ყოველთვის გავანახლოთ cache რომელსაც ვინახავთ Memcached სერვერზე როგორც key, მაგალითად:
	- მომხმარებელმა შექმნა ახალი სამუშაო
	- ჩვენ დავამატეთ სამუშაო Postgresql ბაზაზე
	- და აუცილებლად ამასთანავე უნდა გავანახლოთ Memcached ქეში


---- დიზაინი ----

	-- პროფილის ფოტო
		- პროფილის ფოტოს სიგანის შეცვლა შეავსოს ჩარჩო
		- Message icon დამატება რათა შეძლონ კონტაქტი

---- სერვისები ----
	
	-- ქვე-სერვისები
		- ჩვენ შეგვიძლია მთავარ სერვისში შევნიახოთ ქვე-სერვისები როგორც json object
		- მთავარი სერვისის ქარდზე დავამატოთ რომ სერვისი შეიცავს ამა თუ იმ ქვე-სერვისის
	
	- მივცეთ უფლება დამკვეთს აირჩიოს ქვე-სერვისები სერვისის შეკვეთისას

---- აუთენთიკაცია ----

	-- სერვისები
		- სერვისის ატვირთვის/განახლებისას არ ვამოწმებთ თუ მომხმარებლის id ემთხვევა სერვისის ამტვირთველის id-ს


---- მეგობრობის სისტემა ---- 

	-- ზოგადად მეგობრობის სისტემა მინდა იყოს განსხვავებული ქონდეს მეტი ისეთი ფუნქცია
	-- რომელიც რეალურად დაეხმარება გაარკვიონ ვინ რას აკეთებს რა
	-- მაგალითად თუ ერთი მეგობარი შეუსრულებს სამუშაოს ვიღაცას შეგვიძლია დამკვეთის
	-- პროფილს დავადოთ მესიჯი რო 'შენს x მეგობარს ნამუშევარი აქვს დამკვეთთან'
	-- რაღაც სანდოობას გამოიწვევს

---- Header modals ----

	-- Header toggle modals depend on id's maybe we could improve it later
	-- for now its alright


---- SECURITY ----

	-- So We have stuff like if (session === 401) but this only checks if user is logged in
	-- meaning anyone whose logged in can bypass it so we should check for specific ids as well