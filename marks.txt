- When we modify skills we don't update the reviews or completed jobs count

- შეგივიძლია დამკვეთის ჩატვირთვისას განცხადებები სქროლვის შემდეგ ჩავტვირთოთ და ზევით სხვა რაღაცაები გავუშვათ
- ჩატვირთვა ბევრად სწრაფი იქნება

- ფოტოებში გამოიყენე srcSet დაგეხმარება პერფორმანსის გაუმჯობესებაში
- შეცვალე Server return-ი json() ფუნქციით და response.status-ით გაუშვი ერორები



---- Memcached (Caching) ----

 -- შეგივიძლია გვქონდეს 1 ან მეტი სერვერი თითოეულ სერვერს შევძლებთ განვუსაზღვროთ
	- მაქსიმალური client კავშირი
	- გამოვუყოთ მეხსიერება
	- და სხვა.

 -- ყოველთვის გავანახლოთ cache რომელსაც ვინახავთ Memcached სერვერზე როგორც key, მაგალითად:
	- მომხმარებელმა შექმნა ახალი სამუშაო
	- ჩვენ დავამატეთ სამუშაო Postgresql ბაზაზე
	- და აუცილებლად ამასთანავე უნდა გავანახლოთ Memcached ქეში


---- დიზაინი ----

	-- პროფილის ფოტო
		- პროფილის ფოტოს სიგანის შეცვლა შეავსოს ჩარჩო
		- Message icon დამატება რათა შეძლონ კონტაქტი

---- სერვისები ----
	
	-- ქვე-სერვისები
		- ჩვენ შეგვიძლია მთავარ სერვისში შევნიახოთ ქვე-სერვისები როგორც json object
		- მთავარი სერვისის ქარდზე დავამატოთ რომ სერვისი შეიცავს ამა თუ იმ ქვე-სერვისის
	
	- მივცეთ უფლება დამკვეთს აირჩიოს ქვე-სერვისები სერვისის შეკვეთისას

---- აუთენთიკაცია ----

	-- სერვისები
		- სერვისის ატვირთვის/განახლებისას არ ვამოწმებთ თუ მომხმარებლის id ემთხვევა სერვისის ამტვირთველის id-ს


---- მეგობრობის სისტემა ---- 

	-- ზოგადად მეგობრობის სისტემა მინდა იყოს განსხვავებული ქონდეს მეტი ისეთი ფუნქცია
	-- რომელიც რეალურად დაეხმარება გაარკვიონ ვინ რას აკეთებს რა
	-- მაგალითად თუ ერთი მეგობარი შეუსრულებს სამუშაოს ვიღაცას შეგვიძლია დამკვეთის
	-- პროფილს დავადოთ მესიჯი რო 'შენს x მეგობარს ნამუშევარი აქვს დამკვეთთან'
	-- რაღაც სანდოობას გამოიწვევს

---- Header modals ----

	-- Header toggle modals depend on id's maybe we could improve it later
	-- for now its alright


---- SECURITY ----

	-- So We have stuff like if (session === 401) but this only checks if user is logged in
	-- meaning anyone whose logged in can bypass it so we should check for specific ids as well

---- ABOUT MAP DATA ----

	-- Check all the city/region values of cities.json against the map api values of them
	-- Sometimes they have minor "-" differences so we gotta check that one out

---- SETUP ----
	
	-- When user adds about for example and after adding about if they remove it they are not able to add it
	-- fix this issue later

---- "JOBS_COMPLETED" COLUMN THAT WE HAVE IN DATABASE SHOULDN't BE IN users_xelosni_specific
 	-- LATER WE WILL HAVE TABLE THAT WILL HOLD ORDERS AND it will have status "completed" | "pending" | "canceled"	
	-- WE WILL USE AGGREGATE functions to count orders that include status "completed"

---- SERVICE REVIEWS ----
	We should have reviews table that will hold service_id and we will have damkveti_id
	as well we will have message and rating

	so here is how it will look 

		TABLE (
			id PRIMARY KEY
			rating
			message
			user_id --> References table users(id)
			service_id
			user_role --> References TABLE users(role)
			created_at now() || other timestamp
		)
	
	to get avg rating for services we will use aggregate functions	

---- UPLOADING SERVICE ----
	USER SHOULD HAVE preferences so they
	can hide
		street_name/placename
		ability to not show job on map for premium users

---- PREMIUM USERS ----
	I GOTTA THINK ABOUT THIS ONE LATER LOL

---- MAPS ----

	-- compatibility issue
		- so every browser has its own way of providing location details

		  - all of them supply features array so we kind of have to loop over all of them
		  to make sure we don't miss any detail that could be used for identifying user location


---- IMAGE SIZES ---- 
	-- POSITIONS
		- So I think I have problems with how image is positioned,
		I thought just having object-cover was enough but later I got images that looked ugly
		with it so idk I'll have a look at it,

		Well Basically What I think is 

			-- Currently I have fixed 351x351px images which is bad considering that
			images might come in as a lot larger or smaller

		
		-- Solution --

			We should first until we compress the image we should have a look at image 
				- sizes
				- bytes

			so whatever is accessible and would be useful we have to utilize it



---- IMAGE SIZES ----

	-- SERVICE IMAGE
		- FRONT VIEW "Thumbnail" -> 251x251 quality 60-90 
		- DEDICATED SERVICE PAGE VIEW "gallery/plain" -> 420x420 quality 60-90
		- HIGH SCALE ON DEMAND VIEW "GALLERY/DEMAND" -> {original}x{original} 80-100

	-- PROFILE IMAGE
		- PROFILE PAGE VIEW

---- VIDEOS SIZES ----

	-- THE THING IS SHOULD I DO VIDEOS AS WELL?	
	-- LETS DO VIDEOS AS WELL


---- შეტყობინებები ----

	-- მეგობრები --
		-- დამკვეთი --
			შეტყობინება როცა
				- ხელოსანი პოსტს დადებს

---- Modifications to private info ----

	-- User shouldn't be able to change nor "phone"|"email"|"firstname"|"lastname"
	-- 4 of these stays as it is that's it.

---- QUERY PERFORMANCE ----

	-- when we update stuff in notifications we could utilize existing partitions
	-- and just use WHERE statement to skip unnessecary queries.

---- Profile Location modification ----

	-- Have a cooldown of around 30 days on location modification 

---- Profile page rebranding ----

	-- we can have popular services and popular skills on rightProfileside
	-- on left we can have some of them and see all button

For non premium users when they create service/job put 10 map load limit

--- Messaging ---

	-- create convos 

-- messaging/notifiactions/friends

	-- be mindful that you will need endless scrolling as well



-- WEBSOCKETS --

	So when it comes to websockets we will have for now I am thinking 
	
	CHANNELS/TOPICS

		||| CLIENT |||
			-- type: {"online_status||status", "conversation", "typing", "seen", "sent"}
			These channels/topics will be supplied by 

			WebSocket.send({type: type})

		||| SERVER |||

			SERVER WILL have 

			async handle_subscribe() {

			}

			async handle_unsubscribe() {
				
			}
			
			async message(peer, message) {
				peer has the current user id and user specific things 
				while message is in this case object that is being sent by user
				from client

				We would have switch in here which would have cases based on message type

				switch(message.type) {
					case "status": {}
				} 
			}
	
	Let's go over one of the feature so we can better understand the flow

	at the path "/message" we have a sidebar and content on the right

	this sidebar has users those users might be typing something how do we go about 
	informing the current user that other user is typing something

	So obviously we have to track <textarea>

	I am thinking we going to have createEffect(on(value, () => {
		
		//whenever something changes in the value we going to inform current user
		//that this user is typing something

		say we have a function

		const subscriptions = new Set()

		ws.send(JSON.stringify({
			"type": "typing"
		}))
		subscribe("typing")
	}, {defer: true}))

--- messaging --- 

so on component mount itself let's let user subscribe to the room that notifies
user that there is some message

if they go to /message then we will subscribe to all the conversations
based on the retreived convos we will have limit on the retreived convos
on initial load

    --- auth

	on initial request lets make JSON Web Token auth instead of cookies